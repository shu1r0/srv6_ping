#!/usr/bin/env python3

import argparse
import yaml
import logging

import srv6_ping
from srv6_ping.ping import traceroute_and_show
from srv6_ping.utils import parse_pktparam_from_conf


def get_args(description=None):
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('-c', '--count', type=int, default=30, help="stop count")
    parser.add_argument('-d', '--dst', help="destination ipv6 address")
    parser.add_argument('--src', help="source ipv6 address. By default, this is the address of the out interface. If the address is not explicitly set, the src must be specified.")
    parser.add_argument('-s', '--segs', default="", help="segment list. (e.g. fd0a::,fd0b::,fd0c::)")
    parser.add_argument('-t', '--timeout', default=3, help="timeout")
    parser.add_argument('-j', '--json_format', action='store_true', help="print json_format")
    parser.add_argument('-f', '--conf_file', help="config file")

    parser.add_argument('--oam', type=bool, default=True, help="SRH OAM flag")
    parser.add_argument('--hlim', type=int, default=64, help="IPv6 hop limit")
    parser.add_argument('--including_srh', type=bool, default=True, help="always include SRH in packets")
    parser.add_argument('--iface', type=str, default=None, help="out interface")

    parser.add_argument('-p', '--protocol', default="udp", choices=["icmp", "udp"], help="probe packet protocol")

    parser.add_argument('-v', '--verbose', action='store_true')

    args = parser.parse_args()
    return args


def run_from_yaml(yaml_file):
    with open(yaml_file) as f:
        conf = yaml.safe_load(f)
    trace_conf = conf.get("traceroute", [])
    for dst_d in trace_conf:
        pkt_params = parse_pktparam_from_conf(dst_d)
        
        traceroute_and_show(timeout=dst_d.get("timeout", 3), max_count=dst_d.get("count", 1), json_format=dst_d.get("json_format", False), pkt_params=pkt_params)


if __name__ == '__main__':
    args = get_args()
    srv6_ping.verbose = args.verbose
    if srv6_ping.verbose:
        logging.getLogger("scapy").setLevel(logging.DEBUG)

    if args.conf_file:
        run_from_yaml(args.conf_file)
    else:
        pkt_params = {
            "src": args.src,
            "dst": args.dst,
            "segs": args.segs.split(","),
            "hlim": args.hlim,
            "including_srh": args.including_srh,
            "oam": args.oam,
            "protocol": args.protocol,
        }
        traceroute_and_show(timeout=args.timeout, max_count=args.count, iface=args.iface, json_format=args.json_format, pkt_params=pkt_params)
